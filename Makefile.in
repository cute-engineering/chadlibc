CC		?= gcc
LD		?= ld
AS		?= $(CC)
AR		= ar
RM		= rm -f

BASE_CFLAGS	+= -Wall -Werror -Wextra
LIBC_CFLAGS = $(BASE_CFLAGS) -Iinclude -nostdlib -nostdinc -fno-stack-protector -fno-builtin -fpic -Isysdeps/$(SYSDEPS_PATH)/include
SYSDEPS_CFLAGS += $(BASE_CFLAGS) -fno-stack-protector -fpic

ifneq ($(CC), tcc)
BASE_CFLAGS	+= -ansi -pedantic
endif
LDFLAGS	+= -nostdlib -shared
ARFLAGS	= rcs


SYSDEPS_PATH	= %(SYSDEPS_SRC)

include src/build.mk
include sysdeps/%(SYSDEPS_SRC)/build.mk

OBJS	= $(addprefix src/, $(SRCS:.c=.o)) $(addprefix sysdeps/$(SYSDEPS_PATH)/, $(SYSDEPS_SRCS:.c=.o))

LIB_SHARED	= libc.so
LIB_STATIC	= libc.a
TARGET		= crt0.o $(LIB_STATIC)
ifeq (%(SYSDEPS_SHARED), 1)
TARGET		+= $(LIB_SHARED)
endif

all: $(TARGET)

$(LIB_STATIC): $(OBJS)
	$(AR) $(ARFLAGS) $@ $^

$(LIB_SHARED): $(OBJS)
	$(LD) $(LDFLAGS) -o $@ $^

crt0.o: sysdeps/$(SYSDEPS_PATH)/crt0.S
	$(AS) -o $@ $^

%.o: %.c
	$(CC) $(LIBC_CFLAGS) -c -o $@ $<

sysdeps/$(SYSDEPS_PATH)/%.o: sysdeps/$(SYSDEPS_PATH)/%.c
	$(CC) $(SYSDEPS_CFLAGS) -c -o $@ $<

include test/build.mk

clean:
	$(RM) $(OBJS) $(TARGET) $(TEST_EXE)

re: clean all

.PHONY: all clean re
